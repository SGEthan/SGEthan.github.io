<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux服务端程序的一次尝试</title>
    <url>/2021/08/28/Linux%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<h1 id="服务器端程序设计文档"><a href="#服务器端程序设计文档" class="headerlink" title="服务器端程序设计文档"></a>服务器端程序设计文档</h1><h2 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h2><p>为了实现广域网五子棋连接对战，即在不同局域网下的机器互相连接，且在不考虑内网穿透等实现手段的情况下，我们需要一个服务器端，用于对战双方数据的转发，服务器端程序部署于云服务器，用于示例的服务器IP地址为<code>101.34.252.176</code>，服务提供商为<a href="https://cloud.tencent.com/">腾讯云</a>。</p>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>用于示例的云服务器系统环境为<code>CentOS 7.6 64bit</code></p>
<h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>在服务器端程序开启的情况下，会监听三个端口，<code>CONF_PORT</code>，<code>HOST_PORT</code>，<code>GUEST_PORT</code>。其中，<code>CONF_PORT</code>用于接收客户端程序的申请，另外两个端口用于建立连接，实现信息的转发。具体过程如下：</p>
<ol>
<li>客户端向服务器端发出申请，连接到<code>CONF_PORT</code>。</li>
<li><p>服务器端向<code>CONF_PORT</code>发送出当前的游戏状态<code>Game_Status</code>，分为<code>VACANT</code>，<code>WAITING</code>，<code>ONGOING</code>，分别表示空闲，已有玩家等待中，以及游戏进行中。</p>
<ul>
<li>若当前为空闲，则当前申请的客户端将与<code>HOST_PORT</code>建立连接，等待另一位玩家进入游戏，并将游戏状态<code>Game_Status</code>修改为<code>WAITING</code>。</li>
<li>若当前为等待，则当前申请的客户端将与<code>GUEST_PORT</code>建立连接，开始游戏，并将并将游戏状态<code>Game_Status</code>修改为<code>ONGOING</code>。</li>
<li>若当前为游戏中，则断开连接，并返回信息。</li>
</ul>
</li>
<li><p>当双方玩家都分别建立连接后，开始进行对战，服务器同时监听双方的信息，并不作修改地转发。</p>
</li>
<li>当一局游戏结束之后，玩家断开连接，将游戏状态<code>Game_Status</code>修改为<code>VACANT</code>，并且还原为最初监听状态。</li>
</ol>
<h2 id="关键算法设计"><a href="#关键算法设计" class="headerlink" title="关键算法设计"></a>关键算法设计</h2><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>由于需要实现与客户端的信息交互，因此使用<code>Socket</code>进行信息的传递。为了避免信息的丢失，保证消息传递的可靠，使用<code>TCP</code>协议，流式传输信息。</p>
<p>分别在不同子进程中使用<code>Socket</code>，和不同端口进行消息的接收与发送。以<code>HOST_PORT</code>为例，主要代码如下所示：</p>
<ol>
<li><p>申请<code>Socket</code>（<code>fd</code>表示文件描述符，用于接收<code>socket()</code>函数的返回值）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> socket_fd_Guest = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//Apply for a socket</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本地地址初始化及绑定Socket：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>  <span class="title">servaddr_Host</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;servaddr_Host, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr_Host));</span><br><span class="line">servaddr_Host.sin_family = AF_INET;</span><br><span class="line">servaddr_Host.sin_addr.s_addr = htonl(INADDR_ANY);	<span class="comment">//Listen to all Addresses</span></span><br><span class="line">servaddr_Host.sin_port = htons(HOST_PORT);			<span class="comment">//Set listening port as default</span></span><br><span class="line">bind(socket_fd_Host, (struct sockaddr*)&amp;servaddr_Host, <span class="keyword">sizeof</span>(servaddr_Host)；<span class="comment">//Bind</span></span><br></pre></td></tr></table></figure>
<p>将Socket设置为对所有IP地址进行监听。</p>
</li>
<li><p>在子进程中开启对于申请的监听：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">listen(socket_fd_Host, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> connect_fd_Host = accept(socket_fd_Host, (struct sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p>新建一个描述符<code>connnect_fd_Host</code>用于接收<code>accept()</code>传递回的Socket描述符。</p>
</li>
<li><p>对消息的读取和发送：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">recv(connect_fd_Guest, buff_H, <span class="number">4096</span>, <span class="number">0</span>);</span><br><span class="line">send(connect_fd_Guest, buff_G, length, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>其中<code>buff_H</code>和<code>buff_G</code>分别是接收和发送消息的缓冲区，为<code>char*</code>类型。</p>
</li>
</ol>
<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>为了实现对三个端口的同时监听，以及互不干扰的并行运行，选择使用<code>MultiProcess</code>实现这项功能。当服务器处于正常监听状态时，进程树如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Server(<span class="number">4257</span>)─┬─Server(<span class="number">15329</span>)<span class="comment">//Listening to CONF_PORT</span></span><br><span class="line">             ├─Server(<span class="number">15330</span>)<span class="comment">//Listening to HOST_PORT</span></span><br><span class="line">             └─Server(<span class="number">15331</span>)<span class="comment">//Listening to GUEST_PORT</span></span><br></pre></td></tr></table></figure>
<p>如图，主进程<code>Server（4257）</code>有三个子进程，分别实现对于三个端口的监听。</p>
<p>当<code>CONF_PORT</code>收到来自客户端的申请时，会从<code>Game_Status</code>文件获取当前的游戏状态，并将其发送给发出申请的客户端。</p>
<p>当游戏成功建立的时候，监听<code>HOST_PORT</code>和<code>GUEST_PORT</code>的两个进程将分别<code>fork()</code>一个子进程，用于向对应端口发送信息，实现发送和监听的分离。在这种状态下，进程树如图所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Server(<span class="number">4257</span>)─┬─Server(<span class="number">15329</span>)<span class="comment">//Listening to CONF_PORT</span></span><br><span class="line">             ├─Server(<span class="number">15330</span>)-Server(<span class="number">15897</span>)<span class="comment">//Listening to HOST_PORT</span></span><br><span class="line">             └─Server(<span class="number">15331</span>)-Server(<span class="number">16372</span>)<span class="comment">//Listening to GUEST_PORT</span></span><br></pre></td></tr></table></figure>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>由于程序涉及到多个进程，而不同进程之间的变量是不共享的，且不同进程之间有通信的需求，因此需要使用一些方法，实现进程之间的通信。这里主要用了三种方法：共享文件，管道通信，以及信号机制。</p>
<h4 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h4><p>关于游戏状态<code>Game_Status</code>的存储和读取，选择使用文件，在目录下建立一个<code>Game_Status</code>文件，用于存储当前的游戏状态。服务器程序每次运行的时候，都会将其初始化为<code>VACANT</code>，以供后续进程读取和修改。</p>
<p>读取过程如代码所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Game_Status_fd = open(<span class="string">&quot;Game_Status&quot;</span>, O_RDONLY);</span><br><span class="line">read(Game_Status_fd, &amp;Game_Status, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">close(Game_Status_fd);</span><br></pre></td></tr></table></figure>
<p>其中<code>Game_Status_fd</code>和<code>Game_Status</code>均为<code>int</code>型变量，<code>Game_Status_fd</code>用作文件描述符，<code>Game_Status</code>用于读取文件中存储的单个<code>int</code>型数据，表示不同状态，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VACANT 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WAITING 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ONGOING 2</span></span><br></pre></td></tr></table></figure>
<p>当<code>HOST</code>玩家建立连接时，将会对<code>Game_Status</code>文件进行修改，修改过程如代码所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Game_Status = WAITING;</span><br><span class="line">Game_Status_fd = open(<span class="string">&quot;Game_Status&quot;</span>, O_WRONLY);</span><br><span class="line">write(Game_Status_fd, &amp;Game_Status, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">close(Game_Status_fd);</span><br></pre></td></tr></table></figure>
<p>由此，可以实现对游戏状态的共享访存。</p>
<h4 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h4><p>在双方都建立连接时，总共有四个进程，分别实现双方消息的接收和发送，这就需要在不同进程之间互相传递信息，才能实现消息的实时转发，这里选择使用匿名管道<code>pipe()</code>来实现此项功能。</p>
<ol>
<li><p>主进程中初始化两个管道：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pipe(fd_1) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *write_H2G = &amp;fd_1[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> *read_H2G = &amp;fd_1[<span class="number">0</span>];<span class="comment">//H2G:Host to Guest</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pipe(fd_2) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *write_G2H = &amp;fd_2[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> *read_G2H = &amp;fd_2[<span class="number">0</span>];<span class="comment">//G2H:Guest to Host</span></span><br></pre></td></tr></table></figure>
<p>其中<code>fd_1</code>和<code>fd_2</code>均为<code>int[2]</code>数组，而<code>write_H2G</code>，<code>read_H2G</code>，<code>write_G2H</code>，<code>read_G2H</code>是为了后面调用方便而初始化的别名。</p>
</li>
<li><p>初始化管道之后，主进程分别<code>fork()</code>两个子进程用于实现信息交流，并在<code>fork()</code>结束之后关闭自己的四个读写端口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">close(*write_H2G);</span><br><span class="line">close(*read_G2H);</span><br><span class="line">close(*write_G2H);</span><br><span class="line">close(*read_H2G);</span><br></pre></td></tr></table></figure>
<p>两个子进程分别关闭与对方对应的读写端口：</p>
<ul>
<li><p><code>Host</code>进程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">close(*write_G2H);</span><br><span class="line">close(*read_H2G);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Client</code>进程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">close(*write_H2G);</span><br><span class="line">close(*read_G2H);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>这样实现消息的实时转发（以<code>Host</code>进程为例）：</p>
<ul>
<li><p>每当Socket传来消息的时候，都将消息不作改动地传递至管道的写端：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    n = recv(connect_fd_Host, buff_H, <span class="number">4096</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span> || n == <span class="number">0</span>)</span><br><span class="line">    &#123;<span class="comment">//when connexion shut down</span></span><br><span class="line">        kill(My_Child, SIGKILL);</span><br><span class="line">        close(connect_fd_Host);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    write(*write_H2G, buff_H, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每当没有新消息时，便阻塞于<code>recv()</code>函数处。</p>
</li>
<li><p>新开一个子进程，实现：每当管道另一端有新消息传递来，将消息不做改动地经有Socket发送出去：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    length = read(*read_G2H, buff_G, <span class="number">4096</span>);</span><br><span class="line">    send(connect_fd_Host, buff_G, length, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>由此，可以实现消息的实时转发</p>
<h4 id="信号机制"><a href="#信号机制" class="headerlink" title="信号机制"></a>信号机制</h4><p>通过以上几种方式，已经可以实现消息的转发，但还存在一些问题。如在程序终止时，主进程的结束不会让各个子进程也结束，以及子进程没有良好的结束和回收机制，因此会造成僵尸进程和孤儿进程的存在。这是需要解决的，我们希望在主进程结束的时候，子进程也能同步结束，以及当有某一方断开连接的时候，各个子进程能够结束，同时让主进程回到最原初的监听状态。</p>
<p>这里选择使用Linux系统的信号（<code>SIGNAL</code>）机制来解决这些问题。</p>
<ul>
<li><p>在主进程中，为了在接收外界信号的同时能够杀死所有的子进程，定义了这样的处理函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> signum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        kill(pid[i], SIGUSR1);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>pid[3]</code>为<code>pid_t</code>型数组，存储了三个子进程的<code>pid</code>。</p>
<p>同时在主进程中将信号<code>SIGINT</code>和<code>SIGTERM</code>与之连接：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">signal(SIGINT, handler);</span><br><span class="line">signal(SIGTERM, handler);</span><br></pre></td></tr></table></figure>
<p>由此可以实现，主进程在收到<code>ctrl+C</code>的信号以及系统<code>kill</code>指令时，可以向所有的子进程发送一个自定义信号<code>SIGUSR1</code>。</p>
</li>
<li><p>在子进程中，为了在接收主进程信号的同时能够杀死对应的子进程，定义了这样的处理函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Be_Killed_Handler</span><span class="params">(<span class="keyword">int</span> signum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    kill(My_Child, SIGKILL);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>My_Child</code>为<code>pid_t</code>型变量，存储了各自对应的子进程<code>pid</code>。</p>
<p>并在子进程中将信号<code>SIGUSR1</code>与之相连：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">signal(SIGUSR1, Be_Killed_Handler);</span><br></pre></td></tr></table></figure>
<p>由此可以实现，当子进程收到来自主进程的<code>SIGUSR1</code>时，可以杀死孙进程，然后自我结束。</p>
</li>
<li><p>在孙进程中，为了防止变成孤儿进程，定义了这样的处理函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pipe_Handler</span><span class="params">(<span class="keyword">int</span> signum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在子进程中将信号<code>SIGPIPE</code>与之相连：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">signal(SIGPIPE, Pipe_Handler);</span><br></pre></td></tr></table></figure>
<p>由此可以实现，在管道另一端关闭时，孙进程自己结束，而不会在对应子进程结束后成为孤儿进程。</p>
</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>除了以上三种方式之外，还在主进程循环的末尾有这样的语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Exit_Pid = wait(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	kill(pid[i], SIGUSR1);</span><br></pre></td></tr></table></figure>
<p>主进程会阻塞在这里，等待着第一个子进程的结束，一旦有一个子进程结束，主进程将会结束所有的子进程，然后回到循环的开头，回到等待连接的状态。</p>
<h2 id="部署与运行"><a href="#部署与运行" class="headerlink" title="部署与运行"></a>部署与运行</h2><p>服务器端代码命名为<code>Server.c</code>，在<code>Linux</code>服务器上编译运行的指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc Server.c -o Server</span><br><span class="line">$ nohup ./Server &amp;</span><br></pre></td></tr></table></figure>
<p>这里使用<code>nohup</code>以及<code>&amp;</code>是为了让程序能够在后台运行，并且关闭终端也能持续运行。</p>
<h2 id="心得与展望"><a href="#心得与展望" class="headerlink" title="心得与展望"></a>心得与展望</h2><p>服务端程序的编写涉及到了很多Linux操作系统以及计算机网络的的内容，涉及范围较广，对于个人能力提升较大。后期考虑添加账户系统，以及排名系统，使之作为联网游戏更加完整。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>学期总结</title>
    <url>/2022/02/16/%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="学期总结"><a href="#学期总结" class="headerlink" title="学期总结"></a>学期总结</h1><p>去年的时候，抓着暑假的尾巴搭建了自己的博客，但从那之后，似乎也没有再写过博文。如果不考虑用来做测试的那两篇，这应该算是第一篇博文了。</p>
<p>转眼一个学期和寒假就这么过去，总算得空，且有闲心来写一些东西。接近半年的时间没有摸自己的博客，竟花了半小时重温了一遍hexo的搭建和使用，才开始动笔写下这篇。</p>
<p>简单算算，差不多正好六个月，不长不短的一段时间。学到了很多新的东西，思考了很多新的问题，有高光有挫败。Anyway，我仍然期望自己的博客是技术向的，酸腐的文字在这里就不必多说了。</p>
<h2 id="学习相关"><a href="#学习相关" class="headerlink" title="学习相关"></a>学习相关</h2><p>先从学业相关的东西来开始吧。</p>
<p>在课程方面，这一学期是从学校课程学到了一些有用的知识的，列举如下：</p>
<ul>
<li><p>Web信息处理与应用（<a href="http://staff.ustc.edu.cn/~tongxu/webinfo/">课程主页</a>）</p>
<p>非常有意思的一门课程，徐童老师（<a href="http://staff.ustc.edu.cn/~tongxu/">老师的主页</a>）也是非常风趣幽默的一个人，课程涉及知识非常之广范繁杂，但老师的PPT制作良好，适合异步学习。大致涉及了web信息的搜集（爬虫），处理（分类，聚类等大数据知识），检索（网页索引，搜索引擎，多模态检索等）。毕竟是选修课，大多数知识一笔带过，但作为web信息，大数据知识的入门课程还是非常不错的。该学期总共三次实验，大致内容和总结如下：</p>
<ul>
<li>实验一：首先对所给的数据集（美国经济相关新闻数据集）进行预处理（这里涉及到$NLP$的工具和知识），然后在数据集上构建一个简单的搜索引擎，要求实现布尔检索和语义检索。项目地址：<a href="https://github.com/SGEthan/Info_Retrieving">SGEthan/Info_Retrieving: My Project for the topic of Web Information Retrieving (github.com)</a></li>
<li>实验二：知识表示学习相关，要求进行关系预测，即，在所给数据集上，给出实体 $entity:\mathbf{e}_1$ 和关系 $relation:\mathbf{r}$ ，要求计算给出与 $\mathbf{e_1}$ 有着关系 $\mathbf{r}$ 的实体 $entity:\mathbf{e_1}$ 的预测。项目地址：<a href="https://github.com/SGEthan/Relation_Prediction">SGEthan/Relation_Prediction: Project for my Course of topic of Relation Prediction (github.com)</a></li>
<li>实验三：推荐系统的构建，要求在所给数据集的基础上对每个用户进行音乐的推荐。我们采用了<strong>基于物品的协同过滤推荐</strong>。项目地址：<a href="https://github.com/SGEthan/Recommend">https://github.com/SGEthan/Recommend</a></li>
</ul>
</li>
<li><p>机器学习 （<a href="https://miralab.ai/course/ml_2021fall/">课程主页</a>）</p>
<p>是我在USTC两年半以来上过的最硬核的一门课程，没有之一，被称为<strong>西区数学之巅</strong>。这门课程的数学涉及范围之广泛，难度之大，是计科和信院大多数课程所不及的，这或许是王杰老师（<a href="https://miralab.ai/people/jie-wang/">老师的主页</a>）的个人特点，但也确实契合科大扎实的数理基础风气，老师还有一个特色，使用全英文的参考资料，作业和考试也全部要求英语作答，这是我大学以来的第一次。</p>
</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Thoughts</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2021/08/28/test-my-site/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
